<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context
	   https://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/tx
	   http://www.springframework.org/schema/tx/spring-tx.xsd
	   http://www.springframework.org/schema/aop
	   https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- mybatis整合的相关配置 -->
    <!-- 引入数据库连接参数配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

    <!-- mybatis数据源的相关配置 采用mybatis自带的数据库线程池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"></property>
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="initialSize" value="${jdbc.initSize}"></property>
    </bean>

    <!-- 创建Configuration、SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 将上面配置好的DataSource对象放入数据库会话工厂 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- Resource资源路径对象 注意地址的写法-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <!-- 类型别名包 若不注入，则需要需要写实体类的全路径-->
        <property name="typeAliasesPackage" value="com.zhangci"></property>
        <!-- 可省略configLocation 加载mybatis配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 分页插件配置 依赖与数据库连接 -->
        <property name="plugins">
            <array>
                <!--获取线程变量中的分页对象，该插件需要指定分页参数合理化配置-->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>reasonable=true</value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 将dao包下的类全部创建代理对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zhangci.*.dao"></property>
    </bean>

    <!-- 配置事务管理器对象 id必须为transactionManager ：因为下面的注解事务注解识别的默认值是transactionManager-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置事务方法一：注解的识别,@Transactional -->
    <tx:annotation-driven></tx:annotation-driven>

    <!--&lt;!&ndash; 配置事务方法二：显示的定义事务通知 &ndash;&gt;
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"></tx:method>
            <tx:method name="select*" propagation="SUPPORTS" rollback-for="java.lang.Exception"></tx:method>
            <tx:method name="query*" propagation="SUPPORTS" rollback-for="java.lang.Exception"></tx:method>
            <tx:method name="get*" propagation="SUPPORTS" rollback-for="java.lang.Exception"></tx:method>
        </tx:attributes>
    </tx:advice>

    &lt;!&ndash; 配置事务方法二：把txAdvice 事务通知织入到servicePointcut切入点&ndash;&gt;
    <aop:config>
        <aop:pointcut id="servicePointcut" expression="execution(* com.zhangci.*.service.impl.*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut"></aop:advisor>
    </aop:config>-->
</beans>